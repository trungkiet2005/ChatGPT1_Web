{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI_PROJECT\\\\Chat-GPT1-Web\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Message from './Message';\nimport './ChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"https://huynhtrungkiet09032005-gpt1.hf.space\";\nfunction ChatBox() {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([{\n    role: 'bot',\n    text: 'Xin chào! Hãy nhập vài từ để mình làm thơ cho bạn.'\n  }]);\n  const [loading, setLoading] = useState(false);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      role: 'user',\n      text: input\n    }]);\n    setLoading(true);\n    try {\n      console.log('Sending request to:', `${BASE_URL}/generate`);\n      console.log('Request payload:', {\n        prompt: input,\n        max_length: 350,\n        temperature: 1.0\n      });\n      const response = await fetch(`${BASE_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: input,\n          max_length: 130,\n          temperature: 1.0\n        })\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Failed to generate poetry: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('Response data:', data);\n\n      // Process the generated text to remove lines containing \":\" and keep only complete lines\n      const rawText = data.generated_text || 'Xin lỗi, không thể tạo thơ lúc này.';\n      // Find the last complete newline\n      const lastNewlineIndex = rawText.lastIndexOf('\\n');\n      const processedText = (lastNewlineIndex !== -1 ? rawText.substring(0, lastNewlineIndex) : rawText).split('\\n').filter(line => !line.includes(':')).filter(line => line.trim() !== '') // Remove empty lines\n      .join('\\n').replace(/\\n\\n/g, '\\n') // Replace double newlines with single newline\n      .trim();\n\n      // Ensure the number of lines is divisible by 4\n      const lines = processedText.split('\\n');\n      const numLines = lines.length;\n      const remainder = numLines % 4;\n      const adjustedLines = remainder === 0 ? lines : lines.slice(0, numLines - remainder);\n\n      // Add newline after every 4 lines\n      const finalText = adjustedLines.reduce((acc, line, index) => {\n        if (index > 0 && index % 4 === 0) {\n          return acc + '\\n' + line;\n        }\n        return acc + (index === 0 ? '' : '\\n') + line;\n      }, '');\n\n      // Add bot response with the processed text\n      setMessages(prev => [...prev, {\n        role: 'bot',\n        text: finalText\n      }]);\n    } catch (error) {\n      console.error('Error generating poetry:', error);\n      setMessages(prev => [...prev, {\n        role: 'bot',\n        text: `Xin lỗi, đã có lỗi xảy ra khi tạo thơ: ${error.message}`\n      }]);\n    } finally {\n      setLoading(false);\n      setInput('');\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-list\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(Message, {\n        role: msg.role,\n        text: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(Message, {\n        role: \"bot\",\n        text: \"\\u0110ang sinh th\\u01A1...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nh\\u1EADp t\\u1EEB kh\\xF3a \\u0111\\u1EC3 l\\xE0m th\\u01A1\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: loading || !input.trim(),\n        \"aria-label\": \"G\\u1EEDi\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L11 13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L15 22L11 13L2 9L22 2Z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"/jfal5Oyap/jI/7LS+v59HXa5mQ=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","Message","jsxDEV","_jsxDEV","BASE_URL","ChatBox","_s","input","setInput","messages","setMessages","role","text","loading","setLoading","handleSend","trim","prev","console","log","prompt","max_length","temperature","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","error","Error","data","json","rawText","generated_text","lastNewlineIndex","lastIndexOf","processedText","substring","split","filter","line","includes","join","replace","lines","numLines","length","remainder","adjustedLines","slice","finalText","reduce","acc","index","message","handleKeyDown","e","key","className","children","map","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onKeyDown","disabled","onClick","viewBox","fill","stroke","strokeWidth","d","_c","$RefreshReg$"],"sources":["D:/AI_PROJECT/Chat-GPT1-Web/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Message from './Message';\nimport './ChatBox.css';\n\nconst BASE_URL = \"https://huynhtrungkiet09032005-gpt1.hf.space\";\n\nfunction ChatBox() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    { role: 'bot', text: 'Xin chào! Hãy nhập vài từ để mình làm thơ cho bạn.' }\n  ]);\n  const [loading, setLoading] = useState(false);\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    \n    // Add user message\n    setMessages(prev => [...prev, { role: 'user', text: input }]);\n    setLoading(true);\n\n    try {\n      console.log('Sending request to:', `${BASE_URL}/generate`);\n      console.log('Request payload:', {\n        prompt: input,\n        max_length: 350,\n        temperature: 1.0\n      });\n\n      const response = await fetch(`${BASE_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          prompt: input,\n          max_length: 130,\n          temperature: 1.0\n        })\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Failed to generate poetry: ${response.status} ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Response data:', data);\n      \n      // Process the generated text to remove lines containing \":\" and keep only complete lines\n      const rawText = data.generated_text || 'Xin lỗi, không thể tạo thơ lúc này.';\n      // Find the last complete newline\n      const lastNewlineIndex = rawText.lastIndexOf('\\n');\n      const processedText = (lastNewlineIndex !== -1 ? rawText.substring(0, lastNewlineIndex) : rawText)\n        .split('\\n')\n        .filter(line => !line.includes(':'))\n        .filter(line => line.trim() !== '') // Remove empty lines\n        .join('\\n')\n        .replace(/\\n\\n/g, '\\n') // Replace double newlines with single newline\n        .trim();\n      \n      // Ensure the number of lines is divisible by 4\n      const lines = processedText.split('\\n');\n      const numLines = lines.length;\n      const remainder = numLines % 4;\n      const adjustedLines = remainder === 0 ? lines : lines.slice(0, numLines - remainder);\n      \n      // Add newline after every 4 lines\n      const finalText = adjustedLines.reduce((acc, line, index) => {\n        if (index > 0 && index % 4 === 0) {\n          return acc + '\\n' + line;\n        }\n        return acc + (index === 0 ? '' : '\\n') + line;\n      }, '');\n      \n      // Add bot response with the processed text\n      setMessages(prev => [\n        ...prev,\n        { \n          role: 'bot', \n          text: finalText\n        }\n      ]);\n    } catch (error) {\n      console.error('Error generating poetry:', error);\n      setMessages(prev => [\n        ...prev,\n        { role: 'bot', text: `Xin lỗi, đã có lỗi xảy ra khi tạo thơ: ${error.message}` }\n      ]);\n    } finally {\n      setLoading(false);\n      setInput('');\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') handleSend();\n  };\n\n  return (\n    <div className=\"chatbox-container\">\n      <div className=\"messages-list\">\n        {messages.map((msg, idx) => (\n          <Message key={idx} role={msg.role} text={msg.text} />\n        ))}\n        {loading && <Message role=\"bot\" text=\"Đang sinh thơ...\" />}\n      </div>\n      <div className=\"input-row\">\n        <input\n          type=\"text\"\n          placeholder=\"Nhập từ khóa để làm thơ\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n          disabled={loading}\n        />\n        <button onClick={handleSend} disabled={loading || !input.trim()} aria-label=\"Gửi\">\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <path d=\"M22 2L11 13\"/>\n            <path d=\"M22 2L15 22L11 13L2 9L22 2Z\"/>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}