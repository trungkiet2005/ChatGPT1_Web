{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI_PROJECT\\\\Chat-GPT1-Web\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Message from './Message';\nimport './ChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"https://huynhtrungkiet09032005-gpt1.hf.space\";\nfunction ChatBox() {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([{\n    role: 'bot',\n    text: 'Xin chào! Hãy nhập vài từ để mình làm thơ cho bạn.'\n  }]);\n  const [loading, setLoading] = useState(false);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    setMessages(prev => [...prev, {\n      role: 'user',\n      text: input\n    }]);\n    setLoading(true);\n    try {\n      console.log('Sending request to:', `${BASE_URL}/generate`);\n      console.log('Request payload:', {\n        prompt: input,\n        max_length: 100,\n        temperature: 1.0\n      });\n      const response = await fetch(`${BASE_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: input,\n          max_length: 100,\n          temperature: 1.0\n        })\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`Failed to generate poetry: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('Response data:', data);\n\n      // Process the generated text to remove lines containing \":\" and incomplete lines\n      const processedText = (data.generated_text || 'Xin lỗi, không thể tạo thơ lúc này.').split('\\n').filter(line => {\n        // Remove lines containing \":\" and lines that don't end with a newline (incomplete lines)\n        return !line.includes(':') && line.trim().length > 0;\n      }).join('\\n').trim(); // Remove any extra whitespace at the end\n\n      // Add bot response with the processed text\n      setMessages(prev => [...prev, {\n        role: 'bot',\n        text: processedText\n      }]);\n    } catch (error) {\n      console.error('Error generating poetry:', error);\n      setMessages(prev => [...prev, {\n        role: 'bot',\n        text: `Xin lỗi, đã có lỗi xảy ra khi tạo thơ: ${error.message}`\n      }]);\n    } finally {\n      setLoading(false);\n      setInput('');\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-list\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(Message, {\n        role: msg.role,\n        text: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(Message, {\n        role: \"bot\",\n        text: \"\\u0110ang sinh th\\u01A1...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nh\\u1EADp t\\u1EEB kh\\xF3a \\u0111\\u1EC3 l\\xE0m th\\u01A1\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: loading || !input.trim(),\n        \"aria-label\": \"G\\u1EEDi\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M2.94 2.94a1.5 1.5 0 0 1 1.6-.33l12.5 5.06c1.2.49 1.2 2.15 0 2.64l-12.5 5.06a1.5 1.5 0 0 1-2.04-1.7l1.13-5.06a.5.5 0 0 1 0-.24L.9 4.64A1.5 1.5 0 0 1 2.94 2.94zm1.13 1.13a.5.5 0 0 0-.67.57l1.13 5.06a1.5 1.5 0 0 1 0 .24l-1.13 5.06a.5.5 0 0 0 .67.57l12.5-5.06a.5.5 0 0 0 0-.94l-12.5-5.06z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 56\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"6nkush6DezDAH+Q3/hyGsH0tsRE=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","Message","jsxDEV","_jsxDEV","BASE_URL","ChatBox","_s","input","setInput","messages","setMessages","role","text","loading","setLoading","handleSend","trim","prev","console","log","prompt","max_length","temperature","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","ok","errorText","error","Error","data","json","processedText","generated_text","split","filter","line","includes","length","join","message","handleKeyDown","e","key","className","children","map","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onKeyDown","disabled","onClick","viewBox","fill","d","_c","$RefreshReg$"],"sources":["D:/AI_PROJECT/Chat-GPT1-Web/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Message from './Message';\r\nimport './ChatBox.css';\r\n\r\nconst BASE_URL = \"https://huynhtrungkiet09032005-gpt1.hf.space\";\r\n\r\nfunction ChatBox() {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState([\r\n    { role: 'bot', text: 'Xin chào! Hãy nhập vài từ để mình làm thơ cho bạn.' }\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSend = async () => {\r\n    if (!input.trim()) return;\r\n    \r\n    // Add user message\r\n    setMessages(prev => [...prev, { role: 'user', text: input }]);\r\n    setLoading(true);\r\n\r\n    try {\r\n      console.log('Sending request to:', `${BASE_URL}/generate`);\r\n      console.log('Request payload:', {\r\n        prompt: input,\r\n        max_length: 100,\r\n        temperature: 1.0\r\n      });\r\n\r\n      const response = await fetch(`${BASE_URL}/generate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: input,\r\n          max_length: 100,\r\n          temperature: 1.0\r\n        })\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`Failed to generate poetry: ${response.status} ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Response data:', data);\r\n      \r\n      // Process the generated text to remove lines containing \":\" and incomplete lines\r\n      const processedText = (data.generated_text || 'Xin lỗi, không thể tạo thơ lúc này.')\r\n        .split('\\n')\r\n        .filter(line => {\r\n          // Remove lines containing \":\" and lines that don't end with a newline (incomplete lines)\r\n          return !line.includes(':') && line.trim().length > 0;\r\n        })\r\n        .join('\\n')\r\n        .trim(); // Remove any extra whitespace at the end\r\n      \r\n      // Add bot response with the processed text\r\n      setMessages(prev => [\r\n        ...prev,\r\n        { \r\n          role: 'bot', \r\n          text: processedText\r\n        }\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error generating poetry:', error);\r\n      setMessages(prev => [\r\n        ...prev,\r\n        { role: 'bot', text: `Xin lỗi, đã có lỗi xảy ra khi tạo thơ: ${error.message}` }\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') handleSend();\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbox-container\">\r\n      <div className=\"messages-list\">\r\n        {messages.map((msg, idx) => (\r\n          <Message key={idx} role={msg.role} text={msg.text} />\r\n        ))}\r\n        {loading && <Message role=\"bot\" text=\"Đang sinh thơ...\" />}\r\n      </div>\r\n      <div className=\"input-row\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nhập từ khóa để làm thơ\"\r\n          value={input}\r\n          onChange={e => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          disabled={loading}\r\n        />\r\n        <button onClick={handleSend} disabled={loading || !input.trim()} aria-label=\"Gửi\">\r\n          <svg viewBox=\"0 0 20 20\" fill=\"currentColor\"><path d=\"M2.94 2.94a1.5 1.5 0 0 1 1.6-.33l12.5 5.06c1.2.49 1.2 2.15 0 2.64l-12.5 5.06a1.5 1.5 0 0 1-2.04-1.7l1.13-5.06a.5.5 0 0 1 0-.24L.9 4.64A1.5 1.5 0 0 1 2.94 2.94zm1.13 1.13a.5.5 0 0 0-.67.57l1.13 5.06a1.5 1.5 0 0 1 0 .24l-1.13 5.06a.5.5 0 0 0 .67.57l12.5-5.06a.5.5 0 0 0 0-.94l-12.5-5.06z\"/></svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}